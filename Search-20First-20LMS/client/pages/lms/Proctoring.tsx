import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Switch } from '@/components/ui/switch';
import { Checkbox } from '@/components/ui/checkbox';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import {
  Shield, Eye, Camera, Mic, Monitor, AlertTriangle, Play, Pause,
  StopCircle, Users, Clock, Settings, Download, Upload, Search,
  FileText, CheckCircle, XCircle, Flag, Volume2, VolumeX,
  Smartphone, Laptop, Mouse, Keyboard, Wifi, Battery,
  BarChart, TrendingUp, Calendar, User, BookOpen, Star,
  Plus, Edit, Trash2, RefreshCw, Filter, Maximize, MicOff,
  CameraOff, Headphones, Video, FileVideo, Archive, Folder,
  Image, ZoomIn, Share2, Copy, Clipboard, Save, RotateCcw,
  Activity, Zap, ShieldCheck, AlertOctagon, Target, Gauge
} from 'lucide-react';

interface ProctoringSession {
  id: string;
  examId: string;
  examTitle: string;
  studentId: string;
  studentName: string;
  studentEmail: string;
  startTime: string;
  endTime?: string;
  duration: number;
  status: 'Active' | 'Completed' | 'Flagged' | 'Terminated' | 'Pending';
  monitoringLevel: 'Basic' | 'Standard' | 'Strict' | 'Ultra';
  violations: Violation[];
  proctorNotes: string[];
  systemChecks: SystemCheck[];
  biometricVerification: BiometricData;
  recordings: Recording[];
  securityFlags: SecurityFlag[];
}

interface Violation {
  id: string;
  type: 'Face_Detection' | 'Multiple_Faces' | 'No_Face' | 'Tab_Switch' | 'Full_Screen_Exit' | 
        'Right_Click' | 'Copy_Paste' | 'Audio_Suspicious' | 'Phone_Detected' | 'Prohibited_App';
  severity: 'Low' | 'Medium' | 'High' | 'Critical';
  timestamp: string;
  description: string;
  evidence: string; // screenshot/recording URL
  autoDetected: boolean;
  reviewed: boolean;
  proctorAction: string;
}

interface SystemCheck {
  id: string;
  checkType: 'Camera' | 'Microphone' | 'Screen_Resolution' | 'Browser' | 'Internet' | 'System_Requirements';
  status: 'Pass' | 'Fail' | 'Warning';
  details: string;
  timestamp: string;
}

interface BiometricData {
  faceVerified: boolean;
  keystrokeDynamics: boolean;
  voicePrint: boolean;
  eyeTracking: boolean;
  confidenceScore: number;
}

interface Recording {
  id: string;
  type: 'Screen' | 'Camera' | 'Audio' | 'Full_Session';
  startTime: string;
  duration: number;
  fileUrl: string;
  fileSize: string;
  quality: 'Low' | 'Medium' | 'High';
}

interface SecurityFlag {
  id: string;
  flagType: 'Suspicious_Behavior' | 'Technical_Issue' | 'Identity_Verification' | 'Environmental_Noise';
  description: string;
  timestamp: string;
  autoGenerated: boolean;
  resolved: boolean;
}

interface ProctoringRule {
  id: string;
  name: string;
  description: string;
  category: 'Behavioral' | 'Technical' | 'Environmental' | 'Biometric';
  enabled: boolean;
  sensitivity: 'Low' | 'Medium' | 'High';
  action: 'Warning' | 'Flag' | 'Terminate' | 'Notify_Proctor';
  threshold: number;
}

const sampleSessions: ProctoringSession[] = [
  {
    id: '1',
    examId: 'exam-123',
    examTitle: 'Computer Science Engineering Final Exam',
    studentId: 'TN2401001',
    studentName: 'Arjun Kumar',
    studentEmail: 'arjun.kumar@tnpolytechnic.edu.in',
    startTime: '2024-02-15T10:00:00Z',
    endTime: '2024-02-15T12:00:00Z',
    duration: 120,
    status: 'Completed',
    monitoringLevel: 'Standard',
    violations: [
      {
        id: '1',
        type: 'Tab_Switch',
        severity: 'Medium',
        timestamp: '2024-02-15T10:45:00Z',
        description: 'Student switched browser tab',
        evidence: '/screenshots/violation-1.png',
        autoDetected: true,
        reviewed: true,
        proctorAction: 'Warning issued'
      }
    ],
    proctorNotes: ['Student appeared focused throughout the exam', 'One minor tab switch violation'],
    systemChecks: [
      {
        id: '1',
        checkType: 'Camera',
        status: 'Pass',
        details: 'HD camera detected and functioning properly',
        timestamp: '2024-02-15T09:55:00Z'
      }
    ],
    biometricVerification: {
      faceVerified: true,
      keystrokeDynamics: true,
      voicePrint: false,
      eyeTracking: true,
      confidenceScore: 95
    },
    recordings: [
      {
        id: '1',
        type: 'Full_Session',
        startTime: '2024-02-15T10:00:00Z',
        duration: 120,
        fileUrl: '/recordings/session-1-full.mp4',
        fileSize: '1.2 GB',
        quality: 'High'
      }
    ],
    securityFlags: []
  },
  {
    id: '2',
    examId: 'exam-124',
    examTitle: 'AI & Data Science Midterm',
    studentId: 'TN2401002',
    studentName: 'Priya Sharma',
    studentEmail: 'priya.sharma@tnpolytechnic.edu.in',
    startTime: '2024-02-15T14:00:00Z',
    duration: 90,
    status: 'Active',
    monitoringLevel: 'Strict',
    violations: [],
    proctorNotes: [],
    systemChecks: [
      {
        id: '2',
        checkType: 'Internet',
        status: 'Pass',
        details: 'Stable internet connection detected',
        timestamp: '2024-02-15T13:55:00Z'
      }
    ],
    biometricVerification: {
      faceVerified: true,
      keystrokeDynamics: true,
      voicePrint: true,
      eyeTracking: true,
      confidenceScore: 98
    },
    recordings: [],
    securityFlags: []
  }
];

const sampleRules: ProctoringRule[] = [
  {
    id: '1',
    name: 'Face Detection',
    description: 'Ensure student face is visible throughout the exam',
    category: 'Biometric',
    enabled: true,
    sensitivity: 'High',
    action: 'Flag',
    threshold: 5
  },
  {
    id: '2',
    name: 'Tab Switching',
    description: 'Detect when student switches browser tabs',
    category: 'Technical',
    enabled: true,
    sensitivity: 'Medium',
    action: 'Warning',
    threshold: 3
  },
  {
    id: '3',
    name: 'Multiple Faces',
    description: 'Alert when multiple faces are detected',
    category: 'Behavioral',
    enabled: true,
    sensitivity: 'High',
    action: 'Terminate',
    threshold: 1
  }
];

export default function Proctoring() {
  const [sessions, setSessions] = useState<ProctoringSession[]>(sampleSessions);
  const [rules, setRules] = useState<ProctoringRule[]>(sampleRules);
  const [selectedSession, setSelectedSession] = useState<ProctoringSession | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [activeTab, setActiveTab] = useState('overview');

  const filteredSessions = sessions.filter(session => {
    const matchesSearch = session.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         session.examTitle.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         session.studentEmail.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || session.status.toLowerCase() === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Active': return 'bg-green-500';
      case 'Completed': return 'bg-blue-500';
      case 'Flagged': return 'bg-yellow-500';
      case 'Terminated': return 'bg-red-500';
      case 'Pending': return 'bg-gray-500';
      default: return 'bg-gray-500';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'destructive';
      case 'High': return 'destructive';
      case 'Medium': return 'secondary';
      case 'Low': return 'outline';
      default: return 'outline';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Exam Proctoring</h1>
          <p className="text-muted-foreground">
            AI-powered exam monitoring and integrity assurance system
          </p>
        </div>
        <div className="flex gap-2">
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                New Session
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Create Proctoring Session</DialogTitle>
                <DialogDescription>
                  Set up a new proctored exam session with monitoring rules
                </DialogDescription>
              </DialogHeader>
              <CreateSessionForm onCancel={() => setIsCreateDialogOpen(false)} />
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Sessions</CardTitle>
            <Shield className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-500">
              {sessions.filter(s => s.status === 'Active').length}
            </div>
            <p className="text-xs text-muted-foreground">Currently monitoring</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Flagged Sessions</CardTitle>
            <Flag className="h-4 w-4 text-yellow-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-500">
              {sessions.filter(s => s.status === 'Flagged').length}
            </div>
            <p className="text-xs text-muted-foreground">Require attention</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Violations Detected</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-500">
              {sessions.reduce((sum, s) => sum + s.violations.length, 0)}
            </div>
            <p className="text-xs text-muted-foreground">Total violations</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Integrity Score</CardTitle>
            <CheckCircle className="h-4 w-4 text-blue-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-500">94%</div>
            <p className="text-xs text-muted-foreground">Average exam integrity</p>
          </CardContent>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="live">Live Monitoring</TabsTrigger>
          <TabsTrigger value="sessions">Sessions</TabsTrigger>
          <TabsTrigger value="violations">Violations</TabsTrigger>
          <TabsTrigger value="rules">Rules & Settings</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Live Monitoring Dashboard */}
          <Card>
            <CardHeader>
              <CardTitle>Live Monitoring Dashboard</CardTitle>
              <CardDescription>Real-time overview of active proctoring sessions</CardDescription>
            </CardHeader>
            <CardContent>
              {sessions.filter(s => s.status === 'Active').length === 0 ? (
                <div className="text-center py-8">
                  <Shield className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                  <h3 className="text-lg font-medium mb-2">No Active Sessions</h3>
                  <p className="text-muted-foreground mb-4">
                    No exams are currently being proctored
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {sessions.filter(s => s.status === 'Active').map((session) => (
                    <Card key={session.id} className="border border-green-200">
                      <CardHeader className="pb-3">
                        <div className="flex items-center justify-between">
                          <Badge variant="default" className="bg-green-500">
                            <div className="w-2 h-2 bg-white rounded-full mr-2 animate-pulse"></div>
                            Live
                          </Badge>
                          <Badge variant="outline">{session.monitoringLevel}</Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        <div>
                          <div className="font-medium">{session.studentName}</div>
                          <div className="text-sm text-muted-foreground">{session.examTitle}</div>
                        </div>
                        <div className="flex items-center gap-4 text-sm">
                          <div className="flex items-center gap-1">
                            <Clock className="h-3 w-3" />
                            45 min remaining
                          </div>
                          <div className="flex items-center gap-1">
                            <Flag className="h-3 w-3" />
                            {session.violations.length} violations
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button size="sm" variant="outline" className="flex-1" onClick={() => setSelectedSession(session)}>
                                <Eye className="h-4 w-4 mr-1" />
                                Monitor
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
                              <DialogHeader>
                                <DialogTitle>Live Monitoring - {session.studentName}</DialogTitle>
                                <DialogDescription>
                                  Real-time proctoring interface for active exam session
                                </DialogDescription>
                              </DialogHeader>
                              {selectedSession && <LiveMonitoringInterface session={selectedSession} />}
                            </DialogContent>
                          </Dialog>
                          <Button size="sm" variant="outline">
                            <Flag className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* Recent Activity */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Recent Violations</CardTitle>
                <CardDescription>Latest detected violations across all sessions</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {sessions.flatMap(s => s.violations).slice(0, 5).map((violation) => (
                    <div key={violation.id} className="flex items-center gap-3 p-3 border rounded-lg">
                      <div className="p-2 bg-red-50 rounded-full">
                        <AlertTriangle className="h-4 w-4 text-red-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium">{violation.type.replace('_', ' ')}</div>
                        <div className="text-sm text-muted-foreground">{violation.timestamp}</div>
                      </div>
                      <Badge variant={getSeverityColor(violation.severity)}>
                        {violation.severity}
                      </Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>System Health</CardTitle>
                <CardDescription>Monitoring system status and performance</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">AI Detection Engine</span>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium">Operational</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Recording Services</span>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium">Operational</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Biometric Verification</span>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium">Operational</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Database Connection</span>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                      <span className="text-sm font-medium">Slow Response</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="live" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <Card>
                <CardHeader>
                  <CardTitle>Live Video Feed</CardTitle>
                  <CardDescription>Real-time student monitoring</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="aspect-video bg-gray-900 rounded-lg flex items-center justify-center">
                    <div className="text-center text-white">
                      <Camera className="h-12 w-12 mx-auto mb-4 opacity-50" />
                      <p className="text-lg mb-2">Select an active session to view live feed</p>
                      <p className="text-sm opacity-75">Camera feed will appear here</p>
                    </div>
                  </div>
                  <div className="flex items-center justify-between mt-4">
                    <div className="flex items-center gap-2">
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            <Camera className="h-4 w-4 mr-2" />
                            Camera
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-2xl">
                          <DialogHeader>
                            <DialogTitle>Camera Controls</DialogTitle>
                            <DialogDescription>Manage camera monitoring settings</DialogDescription>
                          </DialogHeader>
                          <CameraControlsDialog />
                        </DialogContent>
                      </Dialog>

                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            <Mic className="h-4 w-4 mr-2" />
                            Audio
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-2xl">
                          <DialogHeader>
                            <DialogTitle>Audio Controls</DialogTitle>
                            <DialogDescription>Manage audio monitoring settings</DialogDescription>
                          </DialogHeader>
                          <AudioControlsDialog />
                        </DialogContent>
                      </Dialog>

                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            <Monitor className="h-4 w-4 mr-2" />
                            Screen
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-2xl">
                          <DialogHeader>
                            <DialogTitle>Screen Monitoring</DialogTitle>
                            <DialogDescription>Control screen recording and monitoring</DialogDescription>
                          </DialogHeader>
                          <ScreenControlsDialog />
                        </DialogContent>
                      </Dialog>
                    </div>
                    <div className="flex items-center gap-2">
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            <Flag className="h-4 w-4 mr-2" />
                            Flag
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-lg">
                          <DialogHeader>
                            <DialogTitle>Flag Violation</DialogTitle>
                            <DialogDescription>Report suspicious behavior or violation</DialogDescription>
                          </DialogHeader>
                          <FlagViolationDialog onCancel={() => console.log('Flag violation cancelled')} />
                        </DialogContent>
                      </Dialog>

                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button variant="destructive" size="sm">
                            <StopCircle className="h-4 w-4 mr-2" />
                            Terminate
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>Terminate Session</AlertDialogTitle>
                            <AlertDialogDescription>
                              Are you sure you want to terminate this proctoring session? This action will end the exam immediately and cannot be undone.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                            <AlertDialogAction>Terminate Session</AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Session Controls</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Recording Status</Label>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                      <span className="text-sm font-medium">Recording Active</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>AI Detection</Label>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium">All Systems Normal</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label>Monitoring Level</Label>
                    <Select defaultValue="standard">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="basic">Basic</SelectItem>
                        <SelectItem value="standard">Standard</SelectItem>
                        <SelectItem value="strict">Strict</SelectItem>
                        <SelectItem value="ultra">Ultra</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <Dialog>
                    <DialogTrigger asChild>
                      <Button className="w-full">
                        <Settings className="h-4 w-4 mr-2" />
                        Adjust Settings
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle>Proctoring Settings</DialogTitle>
                        <DialogDescription>
                          Configure monitoring rules, thresholds, and system preferences
                        </DialogDescription>
                      </DialogHeader>
                      <ProctoringSettingsDialog />
                    </DialogContent>
                  </Dialog>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Real-time Alerts</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="p-3 border border-yellow-200 bg-yellow-50 rounded-lg">
                      <div className="flex items-center gap-2">
                        <AlertTriangle className="h-4 w-4 text-yellow-600" />
                        <span className="text-sm font-medium">Tab Switch Detected</span>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">Student ID: 456 - 2 minutes ago</p>
                    </div>
                    
                    <div className="p-3 border border-blue-200 bg-blue-50 rounded-lg">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-blue-600" />
                        <span className="text-sm font-medium">Face Verification Passed</span>
                      </div>
                      <p className="text-xs text-muted-foreground mt-1">Student ID: 789 - 5 minutes ago</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="sessions" className="space-y-4">
          <div className="flex items-center gap-4">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search sessions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="flagged">Flagged</SelectItem>
                <SelectItem value="terminated">Terminated</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Student</TableHead>
                <TableHead>Exam</TableHead>
                <TableHead>Duration</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Violations</TableHead>
                <TableHead>Integrity Score</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredSessions.map((session) => (
                <TableRow key={session.id}>
                  <TableCell>
                    <div>
                      <div className="font-medium">{session.studentName}</div>
                      <div className="text-sm text-muted-foreground">{session.studentEmail}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <BookOpen className="h-4 w-4 text-muted-foreground" />
                      {session.examTitle}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-1">
                      <Clock className="h-4 w-4 text-muted-foreground" />
                      {session.duration} min
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <div className={`w-2 h-2 rounded-full ${getStatusColor(session.status)}`}></div>
                      <Badge variant={
                        session.status === 'Active' ? 'default' :
                        session.status === 'Completed' ? 'secondary' :
                        session.status === 'Flagged' ? 'destructive' :
                        session.status === 'Terminated' ? 'destructive' : 'outline'
                      }>
                        {session.status}
                      </Badge>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      {session.violations.length > 0 ? (
                        <Badge variant="destructive" className="text-xs">
                          <Flag className="h-3 w-3 mr-1" />
                          {session.violations.length}
                        </Badge>
                      ) : (
                        <Badge variant="outline" className="text-xs">
                          <CheckCircle className="h-3 w-3 mr-1" />
                          Clean
                        </Badge>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <div className="w-16 bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-green-600 h-2 rounded-full" 
                          style={{ width: `${session.biometricVerification.confidenceScore}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium">{session.biometricVerification.confidenceScore}%</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm" onClick={() => setSelectedSession(session)}>
                            <Eye className="h-4 w-4" />
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
                          <DialogHeader>
                            <DialogTitle>Session Details - {session.studentName}</DialogTitle>
                            <DialogDescription>Comprehensive proctoring session report</DialogDescription>
                          </DialogHeader>
                          {selectedSession && <SessionDetailView session={selectedSession} />}
                        </DialogContent>
                      </Dialog>

                      {session.status === 'Active' && (
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="outline" size="sm" onClick={() => setSelectedSession(session)}>
                              <Monitor className="h-4 w-4" />
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
                            <DialogHeader>
                              <DialogTitle>Live Monitoring - {session.studentName}</DialogTitle>
                              <DialogDescription>
                                Real-time proctoring controls and monitoring interface
                              </DialogDescription>
                            </DialogHeader>
                            {selectedSession && <LiveMonitoringInterface session={selectedSession} />}
                          </DialogContent>
                        </Dialog>
                      )}

                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            <Download className="h-4 w-4" />
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-2xl">
                          <DialogHeader>
                            <DialogTitle>Download Session Data</DialogTitle>
                            <DialogDescription>
                              Download comprehensive session data and recordings for {session.studentName}
                            </DialogDescription>
                          </DialogHeader>
                          <DownloadSessionDialog session={session} onCancel={() => console.log('Download cancelled')} />
                        </DialogContent>
                      </Dialog>

                      {session.status === 'Active' && (
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button variant="destructive" size="sm">
                              <StopCircle className="h-4 w-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle>Terminate Session</AlertDialogTitle>
                              <AlertDialogDescription>
                                Are you sure you want to terminate this proctoring session? This action cannot be undone.
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction>Terminate</AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TabsContent>

        <TabsContent value="violations" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Violation Analysis</CardTitle>
              <CardDescription>Review and analyze detected violations across all sessions</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Student</TableHead>
                    <TableHead>Violation Type</TableHead>
                    <TableHead>Severity</TableHead>
                    <TableHead>Time</TableHead>
                    <TableHead>Evidence</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {sessions.flatMap(session => 
                    session.violations.map(violation => ({
                      ...violation,
                      studentName: session.studentName,
                      sessionId: session.id
                    }))
                  ).map((violation) => (
                    <TableRow key={violation.id}>
                      <TableCell>{violation.studentName}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <AlertTriangle className="h-4 w-4 text-orange-500" />
                          {violation.type.replace('_', ' ')}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant={getSeverityColor(violation.severity)}>
                          {violation.severity}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="text-sm">{new Date(violation.timestamp).toLocaleString()}</div>
                      </TableCell>
                      <TableCell>
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="outline" size="sm">
                              <Eye className="h-4 w-4 mr-2" />
                              View
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                            <DialogHeader>
                              <DialogTitle>Violation Evidence - {violation.studentName}</DialogTitle>
                              <DialogDescription>
                                Detailed view of violation evidence and analysis
                              </DialogDescription>
                            </DialogHeader>
                            <ViewViolationDialog violation={violation} />
                          </DialogContent>
                        </Dialog>
                      </TableCell>
                      <TableCell>
                        <Badge variant={violation.reviewed ? 'secondary' : 'outline'}>
                          {violation.reviewed ? 'Reviewed' : 'Pending'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="sm">
                            <CheckCircle className="h-4 w-4" />
                          </Button>
                          <Button variant="outline" size="sm">
                            <XCircle className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="rules" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Proctoring Rules Configuration</CardTitle>
              <CardDescription>Configure AI detection rules and thresholds</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {rules.map((rule) => (
                  <Card key={rule.id} className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3">
                          <Switch checked={rule.enabled} />
                          <div>
                            <div className="font-medium">{rule.name}</div>
                            <div className="text-sm text-muted-foreground">{rule.description}</div>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="text-right">
                          <div className="text-sm font-medium">Sensitivity</div>
                          <Badge variant="outline">{rule.sensitivity}</Badge>
                        </div>
                        <div className="text-right">
                          <div className="text-sm font-medium">Action</div>
                          <Badge variant="secondary">{rule.action.replace('_', ' ')}</Badge>
                        </div>
                        <div className="flex gap-2">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button variant="outline" size="sm">
                                <Edit className="h-4 w-4" />
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="max-w-3xl">
                              <DialogHeader>
                                <DialogTitle>Edit Rule - {rule.name}</DialogTitle>
                                <DialogDescription>
                                  Modify detection rules, sensitivity levels, and automated actions
                                </DialogDescription>
                              </DialogHeader>
                              <EditRuleDialog rule={rule} onCancel={() => console.log('Rule edit cancelled')} />
                            </DialogContent>
                          </Dialog>
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button variant="outline" size="sm">
                                <Settings className="h-4 w-4" />
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                              <DialogHeader>
                                <DialogTitle>Advanced Rule Settings - {rule.name}</DialogTitle>
                                <DialogDescription>
                                  Configure advanced detection parameters and threshold settings
                                </DialogDescription>
                              </DialogHeader>
                              <RuleSettingsDialog rule={rule} />
                            </DialogContent>
                          </Dialog>
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Violation Distribution</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>Tab Switching</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-red-600 h-2 rounded-full" style={{ width: '45%' }}></div>
                      </div>
                      <span className="text-sm">45%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>No Face Detected</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-orange-600 h-2 rounded-full" style={{ width: '25%' }}></div>
                      </div>
                      <span className="text-sm">25%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Multiple Faces</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-yellow-600 h-2 rounded-full" style={{ width: '20%' }}></div>
                      </div>
                      <span className="text-sm">20%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Copy/Paste</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-blue-600 h-2 rounded-full" style={{ width: '10%' }}></div>
                      </div>
                      <span className="text-sm">10%</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Detection Accuracy</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>Face Recognition</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-green-600 h-2 rounded-full" style={{ width: '96%' }}></div>
                      </div>
                      <span className="text-sm">96%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Behavioral Analysis</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-blue-600 h-2 rounded-full" style={{ width: '89%' }}></div>
                      </div>
                      <span className="text-sm">89%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Audio Analysis</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-purple-600 h-2 rounded-full" style={{ width: '92%' }}></div>
                      </div>
                      <span className="text-sm">92%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Screen Monitoring</span>
                    <div className="flex items-center gap-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-orange-600 h-2 rounded-full" style={{ width: '94%' }}></div>
                      </div>
                      <span className="text-sm">94%</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Session Trends</CardTitle>
              <CardDescription>Proctoring session statistics over time</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-64 flex items-end justify-between gap-2">
                {[12, 18, 15, 25, 22, 28, 24, 31, 27, 29, 26, 23].map((value, index) => (
                  <div key={index} className="flex flex-col items-center gap-2">
                    <div 
                      className="w-8 bg-blue-500 rounded-t"
                      style={{ height: `${(value / 35) * 200}px` }}
                    ></div>
                    <span className="text-xs text-muted-foreground">
                      {['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][index]}
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

function CreateSessionForm({ onCancel }: { onCancel: () => void }) {
  const [formData, setFormData] = useState({
    examId: '',
    studentId: '',
    monitoringLevel: 'Standard',
    duration: 120,
    features: {
      faceDetection: true,
      screenRecording: true,
      audioRecording: true,
      keystrokeAnalysis: true,
      eyeTracking: false,
      biometricVerification: true
    }
  });

  return (
    <div className="space-y-6">
      <Tabs defaultValue="basic" className="space-y-4">
        <TabsList>
          <TabsTrigger value="basic">Basic Settings</TabsTrigger>
          <TabsTrigger value="monitoring">Monitoring Level</TabsTrigger>
          <TabsTrigger value="features">Features</TabsTrigger>
        </TabsList>

        <TabsContent value="basic" className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="exam">Exam</Label>
              <Select value={formData.examId} onValueChange={(value) => setFormData({...formData, examId: value})}>
                <SelectTrigger>
                  <SelectValue placeholder="Select exam" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="exam-123">Computer Science Engineering Final Exam</SelectItem>
                  <SelectItem value="exam-124">AI & Data Science Midterm</SelectItem>
                  <SelectItem value="exam-125">Computer Engineering Quiz</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="student">Student</Label>
              <Select value={formData.studentId} onValueChange={(value) => setFormData({...formData, studentId: value})}>
                <SelectTrigger>
                  <SelectValue placeholder="Select student" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="TN2401001">Arjun Kumar</SelectItem>
                  <SelectItem value="TN2401002">Priya Sharma</SelectItem>
                  <SelectItem value="TN2401003">Vikram Patel</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="duration">Duration (minutes)</Label>
            <Input 
              id="duration" 
              type="number"
              value={formData.duration}
              onChange={(e) => setFormData({...formData, duration: parseInt(e.target.value)})}
              min="30"
              max="300"
            />
          </div>
        </TabsContent>

        <TabsContent value="monitoring" className="space-y-4">
          <div className="space-y-4">
            <Label>Monitoring Level</Label>
            <div className="space-y-3">
              {[
                { value: 'Basic', description: 'Basic screen recording and face detection' },
                { value: 'Standard', description: 'Enhanced monitoring with behavioral analysis' },
                { value: 'Strict', description: 'Comprehensive monitoring with AI analysis' },
                { value: 'Ultra', description: 'Maximum security with biometric verification' }
              ].map((level) => (
                <label key={level.value} className="flex items-center space-x-3 cursor-pointer p-3 border rounded-lg">
                  <input
                    type="radio"
                    value={level.value}
                    checked={formData.monitoringLevel === level.value}
                    onChange={(e) => setFormData({...formData, monitoringLevel: e.target.value})}
                  />
                  <div>
                    <div className="font-medium">{level.value}</div>
                    <div className="text-sm text-muted-foreground">{level.description}</div>
                  </div>
                </label>
              ))}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="features" className="space-y-4">
          <div className="space-y-4">
            <Label>Monitoring Features</Label>
            <div className="space-y-3">
              {[
                { key: 'faceDetection', label: 'Face Detection', description: 'Monitor student presence and identity' },
                { key: 'screenRecording', label: 'Screen Recording', description: 'Record full screen activity' },
                { key: 'audioRecording', label: 'Audio Recording', description: 'Monitor audio for suspicious sounds' },
                { key: 'keystrokeAnalysis', label: 'Keystroke Analysis', description: 'Analyze typing patterns' },
                { key: 'eyeTracking', label: 'Eye Tracking', description: 'Track eye movement and focus' },
                { key: 'biometricVerification', label: 'Biometric Verification', description: 'Advanced identity verification' }
              ].map((feature) => (
                <div key={feature.key} className="flex items-center justify-between p-3 border rounded-lg">
                  <div>
                    <div className="font-medium">{feature.label}</div>
                    <div className="text-sm text-muted-foreground">{feature.description}</div>
                  </div>
                  <Switch
                    checked={formData.features[feature.key as keyof typeof formData.features]}
                    onCheckedChange={(checked) => setFormData({
                      ...formData,
                      features: { ...formData.features, [feature.key]: checked }
                    })}
                  />
                </div>
              ))}
            </div>
          </div>
        </TabsContent>
      </Tabs>

      <div className="flex justify-end space-x-2">
        <Button type="button" variant="outline" onClick={onCancel}>Cancel</Button>
        <Button type="submit">Create Session</Button>
      </div>
    </div>
  );
}

function SessionDetailView({ session }: { session: ProctoringSession }) {
  return (
    <div className="space-y-6">
      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="violations">Violations</TabsTrigger>
          <TabsTrigger value="recordings">Recordings</TabsTrigger>
          <TabsTrigger value="biometric">Biometric Data</TabsTrigger>
          <TabsTrigger value="system">System Checks</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Session Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <Label className="text-sm font-medium">Student</Label>
                  <p className="text-sm">{session.studentName}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Exam</Label>
                  <p className="text-sm">{session.examTitle}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Duration</Label>
                  <p className="text-sm">{session.duration} minutes</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Monitoring Level</Label>
                  <Badge variant="outline">{session.monitoringLevel}</Badge>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Session Status</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div>
                  <Label className="text-sm font-medium">Status</Label>
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${getStatusColor(session.status)}`}></div>
                    <span className="text-sm">{session.status}</span>
                  </div>
                </div>
                <div>
                  <Label className="text-sm font-medium">Violations</Label>
                  <p className="text-sm">{session.violations.length} detected</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Integrity Score</Label>
                  <p className="text-sm">{session.biometricVerification.confidenceScore}%</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="violations" className="space-y-4">
          {session.violations.length === 0 ? (
            <Card>
              <CardContent className="text-center py-8">
                <CheckCircle className="h-12 w-12 mx-auto text-green-500 mb-4" />
                <h3 className="text-lg font-medium mb-2">No Violations Detected</h3>
                <p className="text-muted-foreground">This session completed without any violations</p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {session.violations.map((violation) => (
                <Card key={violation.id}>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <AlertTriangle className="h-5 w-5 text-red-500" />
                        <div>
                          <div className="font-medium">{violation.type.replace('_', ' ')}</div>
                          <div className="text-sm text-muted-foreground">{violation.description}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <Badge variant={getSeverityColor(violation.severity)}>
                          {violation.severity}
                        </Badge>
                        <div className="text-sm text-muted-foreground mt-1">
                          {new Date(violation.timestamp).toLocaleString()}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="recordings" className="space-y-4">
          {session.recordings.length === 0 ? (
            <Card>
              <CardContent className="text-center py-8">
                <Camera className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-2">No Recordings Available</h3>
                <p className="text-muted-foreground">No recordings were made for this session</p>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {session.recordings.map((recording) => (
                <Card key={recording.id}>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Camera className="h-5 w-5 text-blue-500" />
                        <div>
                          <div className="font-medium">{recording.type.replace('_', ' ')} Recording</div>
                          <div className="text-sm text-muted-foreground">
                            Duration: {recording.duration} min • Size: {recording.fileSize} • Quality: {recording.quality}
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm">
                          <Play className="h-4 w-4 mr-2" />
                          Play
                        </Button>
                        <Button variant="outline" size="sm">
                          <Download className="h-4 w-4 mr-2" />
                          Download
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="biometric" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Biometric Verification Results</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-center justify-between">
                  <span>Face Verified</span>
                  <Badge variant={session.biometricVerification.faceVerified ? 'default' : 'secondary'}>
                    {session.biometricVerification.faceVerified ? 'Verified' : 'Not Verified'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Keystroke Dynamics</span>
                  <Badge variant={session.biometricVerification.keystrokeDynamics ? 'default' : 'secondary'}>
                    {session.biometricVerification.keystrokeDynamics ? 'Verified' : 'Not Verified'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Voice Print</span>
                  <Badge variant={session.biometricVerification.voicePrint ? 'default' : 'secondary'}>
                    {session.biometricVerification.voicePrint ? 'Verified' : 'Not Verified'}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span>Eye Tracking</span>
                  <Badge variant={session.biometricVerification.eyeTracking ? 'default' : 'secondary'}>
                    {session.biometricVerification.eyeTracking ? 'Verified' : 'Not Verified'}
                  </Badge>
                </div>
              </div>
              <div className="mt-6">
                <Label className="text-sm font-medium">Overall Confidence Score</Label>
                <div className="flex items-center gap-3 mt-2">
                  <div className="flex-1 bg-gray-200 rounded-full h-3">
                    <div 
                      className="bg-green-600 h-3 rounded-full" 
                      style={{ width: `${session.biometricVerification.confidenceScore}%` }}
                    ></div>
                  </div>
                  <span className="font-medium">{session.biometricVerification.confidenceScore}%</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="system" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Pre-Session System Checks</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {session.systemChecks.map((check) => (
                  <div key={check.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className={`w-3 h-3 rounded-full ${
                        check.status === 'Pass' ? 'bg-green-500' :
                        check.status === 'Warning' ? 'bg-yellow-500' : 'bg-red-500'
                      }`}></div>
                      <div>
                        <div className="font-medium">{check.checkType.replace('_', ' ')}</div>
                        <div className="text-sm text-muted-foreground">{check.details}</div>
                      </div>
                    </div>
                    <Badge variant={
                      check.status === 'Pass' ? 'default' :
                      check.status === 'Warning' ? 'secondary' : 'destructive'
                    }>
                      {check.status}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

function getStatusColor(status: string): string {
  switch (status) {
    case 'Active': return 'bg-green-500';
    case 'Completed': return 'bg-blue-500';
    case 'Flagged': return 'bg-yellow-500';
    case 'Terminated': return 'bg-red-500';
    case 'Pending': return 'bg-gray-500';
    default: return 'bg-gray-500';
  }
}

function getSeverityColor(severity: string): any {
  switch (severity) {
    case 'Critical': return 'destructive';
    case 'High': return 'destructive';
    case 'Medium': return 'secondary';
    case 'Low': return 'outline';
    default: return 'outline';
  }
}

function LiveMonitoringInterface({ session }: { session: ProctoringSession }) {
  const [cameraEnabled, setCameraEnabled] = useState(true);
  const [audioEnabled, setAudioEnabled] = useState(true);
  const [screenRecording, setScreenRecording] = useState(true);
  const [isFullscreen, setIsFullscreen] = useState(false);

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Video Feed */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">Live Camera Feed</CardTitle>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                  <span className="text-sm font-medium">LIVE</span>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="aspect-video bg-gray-900 rounded-lg flex items-center justify-center relative">
                <div className="text-center text-white">
                  <Camera className="h-16 w-16 mx-auto mb-4 opacity-50" />
                  <p className="text-lg mb-2">Student Camera Feed</p>
                  <p className="text-sm opacity-75">{session.studentName} - {session.examTitle}</p>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="absolute top-2 right-2 text-white hover:bg-white/20"
                  onClick={() => setIsFullscreen(!isFullscreen)}
                >
                  <Maximize className="h-4 w-4" />
                </Button>
              </div>

              {/* Camera Controls */}
              <div className="flex items-center justify-between mt-4">
                <div className="flex items-center gap-2">
                  <Button
                    variant={cameraEnabled ? "default" : "outline"}
                    size="sm"
                    onClick={() => setCameraEnabled(!cameraEnabled)}
                  >
                    {cameraEnabled ? <Camera className="h-4 w-4 mr-2" /> : <CameraOff className="h-4 w-4 mr-2" />}
                    Camera
                  </Button>
                  <Button
                    variant={audioEnabled ? "default" : "outline"}
                    size="sm"
                    onClick={() => setAudioEnabled(!audioEnabled)}
                  >
                    {audioEnabled ? <Mic className="h-4 w-4 mr-2" /> : <MicOff className="h-4 w-4 mr-2" />}
                    Audio
                  </Button>
                  <Button
                    variant={screenRecording ? "default" : "outline"}
                    size="sm"
                    onClick={() => setScreenRecording(!screenRecording)}
                  >
                    <Monitor className="h-4 w-4 mr-2" />
                    Screen
                  </Button>
                </div>
                <div className="flex items-center gap-2">
                  <Button variant="outline" size="sm">
                    <Flag className="h-4 w-4 mr-2" />
                    Flag Issue
                  </Button>
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button variant="destructive" size="sm">
                        <StopCircle className="h-4 w-4 mr-2" />
                        Terminate
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Terminate Session</AlertDialogTitle>
                        <AlertDialogDescription>
                          This will immediately end the exam session for {session.studentName}. The action cannot be undone.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction>Terminate</AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Monitoring Panel */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Session Status</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Student</span>
                  <span className="text-sm font-medium">{session.studentName}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Exam</span>
                  <span className="text-sm font-medium">{session.examTitle}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Time Remaining</span>
                  <span className="text-sm font-medium">45:32</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Violations</span>
                  <Badge variant={session.violations.length > 0 ? "destructive" : "outline"}>
                    {session.violations.length}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Integrity Score</span>
                  <span className="text-sm font-medium">{session.biometricVerification.confidenceScore}%</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg">AI Detection Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Face Detection</span>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Active</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Eye Tracking</span>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Monitoring</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Audio Analysis</span>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                    <span className="text-sm">Alert Level</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Screen Monitor</span>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Recording</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Recent Alerts</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="p-2 bg-yellow-50 border border-yellow-200 rounded text-sm">
                  <div className="font-medium text-yellow-800">Tab Switch Detected</div>
                  <div className="text-yellow-600">2 minutes ago</div>
                </div>
                <div className="p-2 bg-blue-50 border border-blue-200 rounded text-sm">
                  <div className="font-medium text-blue-800">Face Verification OK</div>
                  <div className="text-blue-600">5 minutes ago</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Screen Monitoring */}
      <Card>
        <CardHeader>
          <CardTitle>Screen Activity</CardTitle>
          <CardDescription>Real-time screen monitoring and recording</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="aspect-[16/10] bg-gray-100 rounded-lg flex items-center justify-center">
            <div className="text-center text-gray-500">
              <Monitor className="h-12 w-12 mx-auto mb-4" />
              <p className="text-lg mb-2">Screen Recording Active</p>
              <p className="text-sm">Student's screen is being monitored and recorded</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function CameraControlsDialog() {
  const [quality, setQuality] = useState('High');
  const [frameRate, setFrameRate] = useState('30fps');
  const [faceDetection, setFaceDetection] = useState(true);
  const [recordingEnabled, setRecordingEnabled] = useState(true);

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label>Video Quality</Label>
          <Select value={quality} onValueChange={setQuality}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Low">Low (480p)</SelectItem>
              <SelectItem value="Medium">Medium (720p)</SelectItem>
              <SelectItem value="High">High (1080p)</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label>Frame Rate</Label>
          <Select value={frameRate} onValueChange={setFrameRate}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="15fps">15 FPS</SelectItem>
              <SelectItem value="30fps">30 FPS</SelectItem>
              <SelectItem value="60fps">60 FPS</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Face Detection</Label>
            <p className="text-sm text-muted-foreground">AI-powered face recognition and tracking</p>
          </div>
          <Switch checked={faceDetection} onCheckedChange={setFaceDetection} />
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Recording</Label>
            <p className="text-sm text-muted-foreground">Save camera feed for review</p>
          </div>
          <Switch checked={recordingEnabled} onCheckedChange={setRecordingEnabled} />
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button variant="outline">Reset</Button>
        <Button>Apply Settings</Button>
      </div>
    </div>
  );
}

function AudioControlsDialog() {
  const [sensitivity, setSensitivity] = useState('Medium');
  const [noiseReduction, setNoiseReduction] = useState(true);
  const [recordingEnabled, setRecordingEnabled] = useState(true);
  const [suspiciousSounds, setSuspiciousSounds] = useState(true);

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label>Microphone Sensitivity</Label>
          <Select value={sensitivity} onValueChange={setSensitivity}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Low">Low</SelectItem>
              <SelectItem value="Medium">Medium</SelectItem>
              <SelectItem value="High">High</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Noise Reduction</Label>
            <p className="text-sm text-muted-foreground">Filter background noise</p>
          </div>
          <Switch checked={noiseReduction} onCheckedChange={setNoiseReduction} />
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Audio Recording</Label>
            <p className="text-sm text-muted-foreground">Record audio for analysis</p>
          </div>
          <Switch checked={recordingEnabled} onCheckedChange={setRecordingEnabled} />
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Suspicious Sound Detection</Label>
            <p className="text-sm text-muted-foreground">Alert on unusual audio patterns</p>
          </div>
          <Switch checked={suspiciousSounds} onCheckedChange={setSuspiciousSounds} />
        </div>
      </div>

      <div className="p-4 bg-blue-50 rounded-lg">
        <h4 className="font-medium text-blue-900 mb-2">Audio Levels</h4>
        <div className="space-y-2">
          <div className="flex items-center gap-2">
            <span className="text-sm">Input:</span>
            <div className="flex-1 bg-gray-200 rounded-full h-2">
              <div className="bg-green-500 h-2 rounded-full" style={{ width: '65%' }}></div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button variant="outline">Test Audio</Button>
        <Button>Apply Settings</Button>
      </div>
    </div>
  );
}

function ScreenControlsDialog() {
  const [recordingQuality, setRecordingQuality] = useState('Medium');
  const [captureInterval, setCaptureInterval] = useState('5s');
  const [fullScreenOnly, setFullScreenOnly] = useState(true);
  const [tabSwitchDetection, setTabSwitchDetection] = useState(true);

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label>Recording Quality</Label>
          <Select value={recordingQuality} onValueChange={setRecordingQuality}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Low">Low (720p)</SelectItem>
              <SelectItem value="Medium">Medium (1080p)</SelectItem>
              <SelectItem value="High">High (1440p)</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label>Capture Interval</Label>
          <Select value={captureInterval} onValueChange={setCaptureInterval}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="1s">Every 1 second</SelectItem>
              <SelectItem value="5s">Every 5 seconds</SelectItem>
              <SelectItem value="10s">Every 10 seconds</SelectItem>
              <SelectItem value="30s">Every 30 seconds</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Full Screen Enforcement</Label>
            <p className="text-sm text-muted-foreground">Require full screen mode</p>
          </div>
          <Switch checked={fullScreenOnly} onCheckedChange={setFullScreenOnly} />
        </div>

        <div className="flex items-center justify-between">
          <div>
            <Label>Tab Switch Detection</Label>
            <p className="text-sm text-muted-foreground">Alert when switching browser tabs</p>
          </div>
          <Switch checked={tabSwitchDetection} onCheckedChange={setTabSwitchDetection} />
        </div>
      </div>

      <div className="p-4 bg-orange-50 rounded-lg">
        <h4 className="font-medium text-orange-900 mb-2">Screen Status</h4>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span>Resolution:</span>
            <span>1920x1080</span>
          </div>
          <div className="flex justify-between">
            <span>Full Screen:</span>
            <Badge variant="outline" className="text-xs">Active</Badge>
          </div>
          <div className="flex justify-between">
            <span>Recording:</span>
            <Badge variant="default" className="text-xs">Active</Badge>
          </div>
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button variant="outline">Download Screen</Button>
        <Button>Apply Settings</Button>
      </div>
    </div>
  );
}

function FlagViolationDialog({ onCancel }: { onCancel?: () => void }) {
  const [violationType, setViolationType] = useState('');
  const [severity, setSeverity] = useState('Medium');
  const [description, setDescription] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Flagging violation:', { violationType, severity, description });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="space-y-4">
        <div className="space-y-2">
          <Label>Violation Type</Label>
          <Select value={violationType} onValueChange={setViolationType}>
            <SelectTrigger>
              <SelectValue placeholder="Select violation type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Face_Detection">No Face Detected</SelectItem>
              <SelectItem value="Multiple_Faces">Multiple Faces</SelectItem>
              <SelectItem value="Tab_Switch">Tab Switching</SelectItem>
              <SelectItem value="Full_Screen_Exit">Exited Full Screen</SelectItem>
              <SelectItem value="Audio_Suspicious">Suspicious Audio</SelectItem>
              <SelectItem value="Phone_Detected">Phone/Device Detected</SelectItem>
              <SelectItem value="Prohibited_App">Prohibited Application</SelectItem>
              <SelectItem value="Other">Other</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label>Severity Level</Label>
          <Select value={severity} onValueChange={setSeverity}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Low">Low</SelectItem>
              <SelectItem value="Medium">Medium</SelectItem>
              <SelectItem value="High">High</SelectItem>
              <SelectItem value="Critical">Critical</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label>Description</Label>
          <Textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Describe the violation or suspicious behavior..."
            rows={3}
          />
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button type="button" variant="outline" onClick={() => onCancel?.()}>Cancel</Button>
        <Button type="submit">
          <Flag className="h-4 w-4 mr-2" />
          Flag Violation
        </Button>
      </div>
    </form>
  );
}

function DownloadSessionDialog({ session, onCancel }: { session: ProctoringSession; onCancel?: () => void }) {
  const [downloadOptions, setDownloadOptions] = useState({
    recordings: true,
    screenshots: true,
    logs: true,
    biometricData: true,
    violations: true,
    systemChecks: true
  });

  const handleDownload = () => {
    const selectedData = Object.entries(downloadOptions)
      .filter(([_, selected]) => selected)
      .map(([key, _]) => key);

    const downloadData = {
      sessionId: session.id,
      studentName: session.studentName,
      examTitle: session.examTitle,
      data: selectedData,
      timestamp: new Date().toISOString()
    };

    const blob = new Blob([JSON.stringify(downloadData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `session_${session.id}_${session.studentName.replace(' ', '_')}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Session Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Student:</span>
              <span>{session.studentName}</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>Duration:</span>
              <span>{session.duration} minutes</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>Status:</span>
              <Badge variant="outline">{session.status}</Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Available Data</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Recordings:</span>
              <span>{session.recordings.length} files</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>Violations:</span>
              <span>{session.violations.length} events</span>
            </div>
            <div className="flex justify-between text-sm">
              <span>System Checks:</span>
              <span>{session.systemChecks.length} checks</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <div>
        <Label className="text-sm font-medium">Select Data to Download</Label>
        <div className="grid grid-cols-2 gap-3 mt-3">
          {Object.entries(downloadOptions).map(([key, checked]) => (
            <div key={key} className="flex items-center space-x-2">
              <Checkbox
                id={key}
                checked={checked}
                onCheckedChange={(value) => setDownloadOptions(prev => ({...prev, [key]: value as boolean}))}
              />
              <Label htmlFor={key} className="text-sm capitalize">
                {key.replace(/([A-Z])/g, ' $1').trim()}
              </Label>
            </div>
          ))}
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button variant="outline" onClick={() => onCancel?.()}>Cancel</Button>
        <Button onClick={handleDownload}>
          <Download className="h-4 w-4 mr-2" />
          Download Selected Data
        </Button>
      </div>
    </div>
  );
}

function ViewViolationDialog({ violation }: { violation: Violation & { studentName: string } }) {
  return (
    <div className="space-y-6">
      <div className="flex items-start gap-4">
        <div className="p-3 rounded-lg bg-red-50 text-red-600">
          <AlertTriangle className="h-8 w-8" />
        </div>
        <div className="flex-1">
          <h3 className="text-xl font-semibold">{violation.type.replace('_', ' ')}</h3>
          <p className="text-sm text-muted-foreground">
            {violation.studentName} • {new Date(violation.timestamp).toLocaleString()}
          </p>
          <Badge variant={getSeverityColor(violation.severity)} className="mt-2">
            {violation.severity} Severity
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Violation Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div>
              <Label className="text-xs font-medium text-muted-foreground">DESCRIPTION</Label>
              <p className="text-sm mt-1">{violation.description}</p>
            </div>
            <div>
              <Label className="text-xs font-medium text-muted-foreground">DETECTION METHOD</Label>
              <p className="text-sm mt-1">{violation.autoDetected ? 'AI Automatic Detection' : 'Manual Flag'}</p>
            </div>
            <div>
              <Label className="text-xs font-medium text-muted-foreground">STATUS</Label>
              <Badge variant={violation.reviewed ? 'default' : 'secondary'} className="mt-1">
                {violation.reviewed ? 'Reviewed' : 'Pending Review'}
              </Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Evidence & Actions</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div>
              <Label className="text-xs font-medium text-muted-foreground">EVIDENCE FILE</Label>
              <div className="flex items-center gap-2 mt-1">
                <Image className="h-4 w-4" />
                <span className="text-sm">{violation.evidence}</span>
                <Button variant="outline" size="sm">
                  <Eye className="h-4 w-4 mr-1" />
                  View
                </Button>
              </div>
            </div>
            <div>
              <Label className="text-xs font-medium text-muted-foreground">PROCTOR ACTION</Label>
              <p className="text-sm mt-1">{violation.proctorAction || 'No action taken yet'}</p>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
        <div className="text-center text-gray-500">
          <Image className="h-12 w-12 mx-auto mb-4" />
          <p className="text-lg mb-2">Evidence Screenshot</p>
          <p className="text-sm">Violation evidence would be displayed here</p>
        </div>
      </div>

      <div className="flex justify-between">
        <div className="flex gap-2">
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Download Evidence
          </Button>
          <Button variant="outline">
            <Share2 className="h-4 w-4 mr-2" />
            Share
          </Button>
        </div>
        <div className="flex gap-2">
          <Button variant="outline">
            <XCircle className="h-4 w-4 mr-2" />
            Dismiss
          </Button>
          <Button variant="default">
            <CheckCircle className="h-4 w-4 mr-2" />
            Mark Reviewed
          </Button>
        </div>
      </div>
    </div>
  );
}

function EditRuleDialog({ rule, onCancel }: { rule: ProctoringRule; onCancel?: () => void }) {
  const [formData, setFormData] = useState({
    name: rule.name,
    description: rule.description,
    enabled: rule.enabled,
    sensitivity: rule.sensitivity,
    action: rule.action,
    threshold: rule.threshold
  });

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="rule-name">Rule Name</Label>
          <Input
            id="rule-name"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
          />
        </div>
        <div>
          <Label htmlFor="rule-category">Category</Label>
          <Select value={rule.category}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Behavioral">Behavioral</SelectItem>
              <SelectItem value="Technical">Technical</SelectItem>
              <SelectItem value="Environmental">Environmental</SelectItem>
              <SelectItem value="Biometric">Biometric</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div>
        <Label htmlFor="rule-description">Description</Label>
        <Textarea
          id="rule-description"
          value={formData.description}
          onChange={(e) => setFormData({...formData, description: e.target.value})}
          rows={3}
        />
      </div>

      <div className="grid grid-cols-3 gap-4">
        <div>
          <Label htmlFor="rule-sensitivity">Sensitivity Level</Label>
          <Select value={formData.sensitivity} onValueChange={(value: 'Low' | 'Medium' | 'High') => setFormData({...formData, sensitivity: value})}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Low">Low</SelectItem>
              <SelectItem value="Medium">Medium</SelectItem>
              <SelectItem value="High">High</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="rule-action">Action</Label>
          <Select value={formData.action} onValueChange={(value: 'Warning' | 'Flag' | 'Terminate' | 'Notify_Proctor') => setFormData({...formData, action: value})}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Warning">Warning</SelectItem>
              <SelectItem value="Flag">Flag</SelectItem>
              <SelectItem value="Terminate">Terminate</SelectItem>
              <SelectItem value="Notify_Proctor">Notify Proctor</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="rule-threshold">Threshold</Label>
          <Input
            id="rule-threshold"
            type="number"
            value={formData.threshold}
            onChange={(e) => setFormData({...formData, threshold: parseInt(e.target.value)})}
            min="1"
            max="100"
          />
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <Switch
          checked={formData.enabled}
          onCheckedChange={(checked) => setFormData({...formData, enabled: checked})}
        />
        <Label>Enable this rule</Label>
      </div>

      <div className="flex justify-end space-x-2">
        <Button variant="outline" onClick={() => onCancel?.()}>Cancel</Button>
        <Button>
          <Save className="h-4 w-4 mr-2" />
          Save Changes
        </Button>
      </div>
    </div>
  );
}

function RuleSettingsDialog({ rule }: { rule: ProctoringRule }) {
  return (
    <Tabs defaultValue="parameters" className="space-y-4">
      <TabsList>
        <TabsTrigger value="parameters">Detection Parameters</TabsTrigger>
        <TabsTrigger value="thresholds">Thresholds & Triggers</TabsTrigger>
        <TabsTrigger value="automation">Automation Rules</TabsTrigger>
        <TabsTrigger value="alerts">Alert Configuration</TabsTrigger>
      </TabsList>

      <TabsContent value="parameters" className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">AI Detection Settings</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>Detection Confidence Level</Label>
                <Select defaultValue="85">
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="70">70% - Permissive</SelectItem>
                    <SelectItem value="85">85% - Balanced</SelectItem>
                    <SelectItem value="95">95% - Strict</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>Processing Interval</Label>
                <Select defaultValue="1">
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="0.5">Every 0.5 seconds</SelectItem>
                    <SelectItem value="1">Every 1 second</SelectItem>
                    <SelectItem value="2">Every 2 seconds</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox defaultChecked />
                <Label>Enable real-time analysis</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox defaultChecked />
                <Label>Store analysis metadata</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox />
                <Label>Enable false positive reduction</Label>
              </div>
            </div>
          </CardContent>
        </Card>
      </TabsContent>

      <TabsContent value="thresholds" className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Violation Thresholds</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label>Maximum violations before action</Label>
              <Input type="number" defaultValue={rule.threshold} min="1" max="20" />
            </div>
            <div>
              <Label>Time window (minutes)</Label>
              <Input type="number" defaultValue="10" min="1" max="60" />
            </div>
            <div>
              <Label>Cooldown period (seconds)</Label>
              <Input type="number" defaultValue="30" min="5" max="300" />
            </div>
          </CardContent>
        </Card>
      </TabsContent>

      <TabsContent value="automation" className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Automated Response Rules</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <Checkbox defaultChecked />
                <Label>Auto-escalate critical violations</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox />
                <Label>Send immediate notifications</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox />
                <Label>Auto-pause session on severe violations</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox />
                <Label>Generate automatic incident reports</Label>
              </div>
            </div>
          </CardContent>
        </Card>
      </TabsContent>

      <TabsContent value="alerts" className="space-y-4">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Alert Configuration</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label>Alert Recipients</Label>
              <Input placeholder="Enter email addresses (comma separated)" />
            </div>
            <div>
              <Label>Alert Template</Label>
              <Select defaultValue="default">
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="default">Standard Alert</SelectItem>
                  <SelectItem value="detailed">Detailed Report</SelectItem>
                  <SelectItem value="minimal">Minimal Notification</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox defaultChecked />
                <Label>Email notifications</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox />
                <Label>SMS alerts for critical violations</Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox defaultChecked />
                <Label>In-app notifications</Label>
              </div>
            </div>
          </CardContent>
        </Card>
      </TabsContent>
    </Tabs>
  );
}

function ProctoringSettingsDialog() {
  return (
    <Tabs defaultValue="detection" className="space-y-4">
      <TabsList>
        <TabsTrigger value="detection">Detection Rules</TabsTrigger>
        <TabsTrigger value="recording">Recording Settings</TabsTrigger>
        <TabsTrigger value="notifications">Notifications</TabsTrigger>
        <TabsTrigger value="integration">Integration</TabsTrigger>
      </TabsList>

      <TabsContent value="detection" className="space-y-4">
        <div className="space-y-4">
          <h3 className="text-lg font-medium">AI Detection Configuration</h3>

          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Face Detection Rules</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <Label>Face Detection Sensitivity</Label>
                <Select defaultValue="high">
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <Label>Multiple Face Tolerance</Label>
                <Select defaultValue="0">
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="0">0 seconds</SelectItem>
                    <SelectItem value="5">5 seconds</SelectItem>
                    <SelectItem value="10">10 seconds</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Behavioral Analysis</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label>Eye Movement Tracking</Label>
                  <p className="text-sm text-muted-foreground">Monitor gaze patterns</p>
                </div>
                <Switch defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>Keystroke Pattern Analysis</Label>
                  <p className="text-sm text-muted-foreground">Detect unusual typing patterns</p>
                </div>
                <Switch defaultChecked />
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <TabsContent value="recording" className="space-y-4">
        <div className="space-y-4">
          <h3 className="text-lg font-medium">Recording Configuration</h3>

          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Video Recording</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <Label>Default Quality</Label>
                <Select defaultValue="1080p">
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="720p">720p</SelectItem>
                    <SelectItem value="1080p">1080p</SelectItem>
                    <SelectItem value="1440p">1440p</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <Label>Compression Level</Label>
                <Select defaultValue="medium">
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="low">Low</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>Auto-Delete Recordings</Label>
                  <p className="text-sm text-muted-foreground">Delete after 30 days</p>
                </div>
                <Switch />
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <TabsContent value="notifications" className="space-y-4">
        <div className="space-y-4">
          <h3 className="text-lg font-medium">Alert Notifications</h3>

          <Card>
            <CardContent className="space-y-4 pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <Label>Real-time Alerts</Label>
                  <p className="text-sm text-muted-foreground">Instant notifications for violations</p>
                </div>
                <Switch defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>Email Notifications</Label>
                  <p className="text-sm text-muted-foreground">Send email alerts to proctors</p>
                </div>
                <Switch defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>SMS Alerts</Label>
                  <p className="text-sm text-muted-foreground">Critical violations only</p>
                </div>
                <Switch />
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <TabsContent value="integration" className="space-y-4">
        <div className="space-y-4">
          <h3 className="text-lg font-medium">External Integrations</h3>

          <Card>
            <CardContent className="space-y-4 pt-6">
              <div className="flex items-center justify-between">
                <div>
                  <Label>LMS Integration</Label>
                  <p className="text-sm text-muted-foreground">Sync with learning management system</p>
                </div>
                <Switch defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>Biometric Database</Label>
                  <p className="text-sm text-muted-foreground">Student identity verification</p>
                </div>
                <Switch defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>Analytics Platform</Label>
                  <p className="text-sm text-muted-foreground">Export data for analysis</p>
                </div>
                <Switch />
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <div className="flex justify-end space-x-2">
        <Button variant="outline">Reset to Defaults</Button>
        <Button>Save All Settings</Button>
      </div>
    </Tabs>
  );
}
